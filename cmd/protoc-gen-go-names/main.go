package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	protogen.Options{}.Run(generateNameFiles)
}

func generateNameFiles(gen *protogen.Plugin) error {
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}

		messageNames, fieldNames := buildNameConst(f)
		generateNameFile(gen, f, messageNames, fieldNames)
	}
	return nil
}

func buildNameConst(file *protogen.File) ([]string, []string) {
	messageNames := make([]string, 0, len(file.Messages))

	fieldNames := make([]string, 0)
	fieldNamesMap := make(map[string]struct{})

	for _, message := range file.Messages {
		messageName := string(message.Desc.Name())
		messageNames = append(messageNames, messageName)

		for _, field := range message.Fields {
			fieldName := string(field.Desc.Name())

			_, isExist := fieldNamesMap[fieldName]
			if !isExist {
				fieldNames = append(fieldNames, fieldName)
				fieldNamesMap[fieldName] = struct{}{}
			}
		}
	}

	return messageNames, fieldNames
}

func generateNameFile(gen *protogen.Plugin, file *protogen.File, messageNames, fieldNames []string) {
	filename := file.GeneratedFilenamePrefix + "_names.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-names. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	if len(messageNames) > 0 {
		g.P("// Message names")
		g.P("const (")
		for _, messageName := range messageNames {
			g.P(fmt.Sprintf("\t%s_MESSAGE_NAME = %q", messageName, messageName))
		}
		g.P(")")
	}

	g.P()

	if len(fieldNames) > 0 {
		g.P("// Field names")
		g.P("const (")
		for _, fieldName := range fieldNames {
			g.P(fmt.Sprintf("\t%s_FIELD_NAME = %q", fieldName, fieldName))
		}
		g.P(")")
	}
}
